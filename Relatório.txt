1. Breve descrição do problema (regras e objetivo).
Este projeto consiste em desenvolver um programa em Python cujo objetivo é resolver uma adaptação do jogo PipeMania. Este jogo decorre numa grelha quadrada, simulando uma rede de canalização, em que cada posição tem uma peça de tubagem, não necessariamente na orientação correta. O jogador precisa de rodar as peças para que todas fiquem na única posição correta em que a água pode circular sem fugas por todas as peças.


2. Descrição da ideia geral para abordar o problema.
A nossa abordagem passa por tratar o problema como um problema de satisfação de restrições, usando procura e inferência. O nosso estado é então um conjunto de variáveis, que podem assumir valores num certo domínio e podem ter restrições. Uma variável é simplesmente uma posição da grelha, por exemplo, uma grelha 3x3 tem 9 variáveis. Um domínio é o conjunto de peças admissíveis para essa posição. As restrições entre variáveis representam os requisitos de adjacência atendendo aos seus domínios. Ou seja, o estado contém a informação de que orientações da peça ainda podem ser válidas em cada posição na grelha, dadas as peças em seu redor.
O estado inicial é composto pelos domínios completos, porque ainda todas as diferentes orientações de uma peça são válidas, ou seja, inicialmente a grelha está vazia, ainda não foi feita nenhuma escolha. A ideia é que, à medida que são realizadas ações, os domínios são progressivamente restringidos até terem apenas um elemento, preenchendo a grelha.


3. Identificação do que é uma ação no contexto do problema.
Na nossa solução, uma ação é composta por uma linha, uma coluna e uma peça, e representa uma escolha de valor de uma variável, ou seja, decidir uma orientação de uma peça. Portanto, uma ação apenas pode ser realizada numa posição cujo domínio não é único, ou seja, ainda está em aberto qual a orientação que eventualmente leva à posição final.


4. Descrição do que é o resultado de aplicar uma ação num estado.
Aplicar uma ação num estado é então a materialização da escolha de orientação da peça numa posição: atribuir o valor, isto é, a peça, à variável, restringindo o domínio dessa posição somente a esse valor e também propagar os seus efeitos nos restantes domínios. (FALAR SOBRE POSIÇÕES INVÁLIDAS)

5. Caso exista algum tipo de pre-processamento ou métodos de inferência, estes devem ser
mencionados.
A inferência é um aspeto crucial na nossa solução, mas como é que é feita? Admitindo que um domínio foi restringido, isto é, que as orientações possíveis da peça diminuíram, propagamos as consequências dessa alteração utilizando apenas dois princípios. O primeiro é que se uma peça do domínio da posição adjacente deixou de se conseguir conectar com a posição atual, devido à peça que possibilitava a conexão ter sido eliminada do dominio da posição atual, temos de a eliminar do domínio da posição adjacente. O segundo é que, como as orientações possíveis diminuiram, agora pode dar-se o caso de todas as orientações possíveis apontarem para uma certa posição adjacente e, caso isso aconteça, a posição para a qual todas apontam tem de ter uma peça que aponte de volta. Portanto temos de eliminar do domínio da posição adjacente qualquer peça que não aponte de volta.
O pré-processamento que utilizámos foi apenas ir a todas as posições da grelha e restringir os domínios. Obviamente, como inicialmente todos os domínios são possíveis, à partida nada iria mudar. Mas como estamos no passo inicial adicionamos à inferência habitual apenas a restrição de que nenhuma peça pode apontar para o exterior da grelha.


6. Identificação da procura final selecionada, quais as suas características (heurística, por
exemplo), e motivo da escolha.
Para a procura, utilizámos a procura em profundidade primeiro, uma vez que possibilita a procura com retrocesso. 
Utilizámos ainda algumas heurísticas de modo a guiar a procura. Para decidir a próxima posição para a qual escolhemos um valor, utilizamos a heurística dos valores remanescentes mínimos seguida da heurística de maior grau, em caso de empate. Escolhemos então a posição cujo domínio tem maior dimensão e que está envolvida em mais restrições com variáveis ainda não atribuídas. Para tal, o conjunto de ações de um estado contém apenas atribuições de peças à posição que foi escolhida. Para escolher qual das possíveis orientações a que testar primeiro, utilizámos a heurística do valor menos restritivo, ou seja, escolhemos a orientação que elimina menos valores no domínio das outras variáveis. Conseguimos fazer isso na procura em profundidade primeiro ao ordenar os valores na ações de um estado com base neste critério.


7. Pequena avaliação experimental comparando diferentes procuras com as instâncias disponibilizadas.
Devido à nossa abordagem, era necessário utilizar a procura em profundidade primeiro. Para averiguar a utilidade das heurísticas na parte da procura, testámos 100 instâncias diferentes do problema PipeMania 25x25 tal como mencionado anteriormente e sem heurísticas, ou seja, escolhendo uma variável e correspondente valor aleatoriamente. Os resultados foram de acordo com a previsão, já que, de facto, tanto o tempo como o número de nós expandido era menor. Em termos quantitativos, a melhoria foi de cerca de 35% em média em ambas as métricas, mas observamos que quanto mais difícil fosse chegar à solução, maior a vantagem de usar heurísticas. Tentámos ainda testar a importância da inferência, mas vimos que era absolutamente necessária a sua presença na nossa solução, caso contrário, teriamos de escolher as variáveis uma a uma. Num problema 25x25 como os testados para a procura, chegamos a deixar correr o código durante meia hora e ainda não tinha encontrado solução, tendo já expandido 4000 vezes mais os nós necessários da solução com inferência.